'''
(c) Copyright 2013 Telefonica, I+D. Printed in Spain (Europe). All Rights
Reserved.

The copyright to the software program(s) is property of Telefonica I+D.
The program(s) may be used and or copied only with the express written
consent of Telefonica I+D or in accordance with the terms and conditions
stipulated in the agreement/contract under which the program(s) have
been supplied.
'''
from __future__ import print_function
import json
from requests import request, codes
from requests.auth import HTTPBasicAuth
from requests.exceptions import Timeout, ConnectionError, SSLError
from urlparse import urljoin, urlsplit, urlunsplit
from com.tdigital.sd.admin.exceptions import ServerException, SdAdminLibraryException


class Client(object):
    """Service Directory HTTP client

    Simple HTTP client managing the base URL and the user credentials and providing
    a method for processing HTTP requests to the service directory with different
    HTTP methods
    """

    # Base URL template where the service directory is listening
    # Parameters: host, port and version must be replaced
    BASE_URL_TEMPLATE = '{protocol}://{host}:{port}/sd/{version}/'

    def __init__(self, url, username='admin', password='admin', verify=True, cert=None, debug=False, timeout=10):
        """Constructor

        Stores the base URL (self.url) and the user credentials to access
        the service directory via basic authentication (self.auth)
        The service directory url should end with "/" because the resources specify a relative path
        based on the base URL. If not ending with "/", it will be added automatically

        :param url Service directory URL (with the pattern <protocol>://<host>:<port>/sd/v1/)
        :param username Username for the basic authentication access. By default, admin
        :param password Password for the basic authentication access. By default, admin
        :param verify Boolean to verify the server certificate (only when SSL) when invoking any HTTP call
        :param cert Client certificate for 2-way SSL. It can be the path to the file containing
                    both the certificate and the private key, or a tuple with the path for
                    both files. See "requests" library documentation. If no 2-way ssl, it must be None.
        :param debug Boolean to enable/disable debugging
        """

        if url.endswith('/'):
            self.url = url
        else:
            self.url = url + '/'
        self.auth = HTTPBasicAuth(username, password)
        self.verify = verify
        self.cert = cert
        self.debug = debug
        self.timeout = timeout
        if self.debug:
            print('')
            print('[Service directory URL]:')
            print(self.url)

    @staticmethod
    def get_url(protocol, host, port, version):
        """Get base URL to access service directory

        Prepares the base URL based on the pattern '{protocol}://{host}:{port}/sd/{version}/'

        :param protocol Protocol to access service directory: 'http' or 'https' (Mandatory)
        :param host The name of the service directory host (Mandatory)
        :param port The port of the service directory (Mandatory)
        :param version The service directory version (Mandatory)
        :return Service directory base URL
        """

        return Client.BASE_URL_TEMPLATE.format(protocol=protocol, host=host, port=port, version=version)

    @staticmethod
    def _print_debug_headers(headers):
        """Print the headers

        From the headers dictionary, generated by "requests" library, print the HTTP headers following
        the HTTP standard.

        :param headers Dictionary with the HTTP headers (either request or response)
        """

        for key, value in headers.iteritems():
            print('{0}: {1}'.format(key, value))

    @staticmethod
    def _print_debug(response):
        """Print the request and response

        Static method to print the HTTP trace for the request and response from the response object
        obtained with "requests" library. The request is available from response object (request.response).

        :param response Response object (including request object) to extract all the information
        """

        # Parse the URL to get the path and location header.
        # parsed_url is a tuple with the form: (scheme, netloc, path, query, fragment)
        parsed_url = urlsplit(response.request.url)
        host = parsed_url[1]
        path = urlunsplit(('', '', parsed_url[2], parsed_url[3], parsed_url[4]))

        # Print the request. Format the first line, headers and body according to HTTP standard
        print('')
        print('[Request]:')
        print(response.request.method + ' ' + path + ' HTTP/1.1')
        Client._print_debug_headers(response.request.headers)
        print('Host: ' + host)
        if response.request.body:
            print('')
            print(response.request.body)

        # Print the response
        print('')
        print('[Response]:')
        print('HTTP/1.1 ' + str(response.status_code))
        Client._print_debug_headers(response.headers)
        if response.text:
            print('')
            print(response.text)
        print('')

    def _prepare_url(self, path):
        """Get resource URL

        Prepare the resource URL with base URL (self.url) and the path. If the path starts with ../
        then it takes the parent directory (e.g. to get gateway info that is not related to API version)

        :param path Relative path to resource (Mandatory)
        :return String with the complete URL to the service directory resource
        """

        return urljoin(self.url, path)

    def _request(self, method, path, data=None, headers=None, **kwargs):
        """Generic HTTP request to the service directory

        Only content-type "application/json" is supported in both request and response

        :param method HTTP method: GET, PUT, POST or DELETE (Mandatory)
        :param path Relative path to resource (Mandatory)
        :param **kwargs Extended parameters to set up the HTTP request
        :return Response object from requests library
        """

        # Get headers (if defined) and add the Accept header to application/json
        if not headers:
            headers = {}
        headers['Accept'] = 'application/json'

        # If data is defined and is a dictionary, then serialize it into a JSON string
        # Also add content-type header as application/json
        if (data):
            if isinstance(data, dict):
                data = json.dumps(data)
            else:
                data = str(data)
            headers['Content-Type'] = 'application/json'

        # Send the HTTP request to the service directory and get the response
        try:
            response = request(
                method,
                self._prepare_url(path),
                auth=self.auth,
                data=data,
                headers=headers,
                verify=self.verify,
                timeout=self.timeout,
                cert=self.cert,
                **kwargs)
        except SSLError as e:
            if self.debug:
                print(e)
            raise SdAdminLibraryException(
                    'SSL error when connecting to Service Directory. Try again later or contact support team.')
        except ConnectionError:
            raise SdAdminLibraryException(
                    'No connection to Service Directory. Try again later or contact support team.')
        except Timeout:
            raise SdAdminLibraryException(
                    'Timeout waiting for a Service Directory response. Try again later or contact support team.')

        # Check if debug is enabled to print request and response
        if self.debug:
            Client._print_debug(response)

        # Do a minimun response checking from SD, e.g valid dict or valid list but not other
        # only empty list is allowed
        # If the response status code is not successful, prepare the appropriate exception
        json_response = self.parse_json_from_sd(response)

        if not response.ok:
            raise ServerException(json_response)
        return json_response

    def parse_json_from_sd(self, response):
        """
        Check that response can be safely converted to json according to the expected
        from SD.
        If no json object can be obtained an exception is raised
        """
        if response.status_code == codes.no_content:  # @UndefinedVariable
            return None
        try:
            resp_json = response.json()  # SD always respond with json
        except ValueError:
            raise SdAdminLibraryException()  # default error message is ok

        if not isinstance(resp_json, (dict, list)):
            raise SdAdminLibraryException()  # default error message is ok

        if isinstance(resp_json, dict):
            if len(resp_json) < 1:
                raise SdAdminLibraryException()  # default error message is ok

        return resp_json

    def get(self, path, params=None):
        """HTTP GET to service directory

        Send a HTTP GET request to the service directory. The JSON response is parsed and
        returned as a dictionary

        :param path Relative path to the GET resource; self.url is the base URL (Mandatory)
        :param params Dictionary for the query parameters (Optional)
        :return Dictionary, after parsing the JSON body, with the response from service directory
        """

        # Send a GET request to the service directory
        return self._request('GET', path, params=params)

    def post(self, path, body=None, headers=None):
        """HTTP POST to service directory

        Send a HTTP POST request to the service directory. The request will include an empty
        body or a JSON body. This method may transform the body parameter into a JSON string when
        a dictionary is passed. The JSON response is parsed and returned as a dictionary.

        :param path Relative path to the POST resource; self.url is the base URL (Mandatory)
        :param body JSON string or dictionary with the request body (Optional)
                    By default, empty body is sent
                    If a dictionary is passed, it will be serialized into a JSON string
        :param headers Dictionary with the request headers (Optional)
                       It will always add "Accept" and "Content-Type" headers with application/json
        :return Dictionary, after parsing the JSON body, with the response from service directory
        """

        return self._request('POST', path, headers=headers, data=body)

    def put(self, path, body=None, headers=None):
        """HTTP PUT to service directory

        Send a HTTP PUT request to the service directory. The request will include an empty
        body or a JSON body. This method may transform the body parameter into a JSON string when
        a dictionary is passed. The JSON response is parsed and returned as a dictionary.

        :param path Relative path to the PUT resource; self.url is the base URL (Mandatory)
        :param body JSON string or dictionary with the request body (Optional)
                    By default, empty body is sent
                    If a dictionary is passed, it will be serialized into a JSON string
        :param headers Dictionary with the request headers (Optional)
                       It will always add "Accept" and "Content-Type" headers with application/json
        :return Dictionary, after parsing the JSON body, with the response from service directory
        """

        return self._request('PUT', path, headers=headers, data=body)

    def delete(self, path):
        """HTTP DELETE to service directory

        Send a HTTP DELETE request to the service directory.

        :param path Relative path to the DELETE resource; self.url is the base URL (Mandatory)
        """
        return self._request('DELETE', path)
